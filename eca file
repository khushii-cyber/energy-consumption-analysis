# Load necessary libraries
library(shiny)
library(ggplot2)
library(readxl)
library(dplyr)
library(bslib)
library(plotly)
library(shinydashboard)
library(DT)

# Create custom theme
custom_theme <- bs_theme(
  bootswatch = "flatly",
  primary = "#3498db",
  secondary = "#2c3e50"
)

# Function to initialize user database
init_user_db <- function() {
  # Placeholder for user authentication
  # In a real app, you would implement proper authentication
  return(TRUE)
}

# Landing Page UI
landing_page <- function() {
  fluidPage(
    theme = custom_theme,
    tags$head(
      tags$style(HTML("
        .landing-container {
          display: flex;
          align-items: center;
          justify-content: center;
          height: 100vh;
          background: linear-gradient(135deg, #f6f8f9 0%, #e5ebee 100%);
        }
        .landing-content {
          text-align: center;
          max-width: 1200px;
          padding: 200px;
          background-color: white;
          border-radius: 15px;
          box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .landing-title {
          color: #2c3e50;
          font-weight: bold;
          margin-bottom: 20px;
        }
        .landing-description {
          color: #7f8c8d;
          margin-bottom: 30px;
        }
        .get-started-btn {
          padding: 12px 30px;
          font-size: 18px;
          border-radius: 50px;
          transition: all 0.3s ease;
        }
        .get-started-btn:hover {
          transform: scale(1.05);
          box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .feature-icons {
          display: flex;
          justify-content: center;
          margin-top: 30px;
        }
        .feature-item {
          margin: 0 20px;
          text-align: center;
          color: #3498db;
        }
      "))
    ),
    div(class = "landing-container",
        div(class = "landing-content",
            h1(class = "landing-title", "ECA Data Explorer"),
            p(class = "landing-description", 
              "A comprehensive platform for analyzing Energy Consumption datasets. 
              Explore global trends, perform advanced statistical analysis, and generate predictive insights 
              to support Energy Consumption research and policy-making."),
            
            # Enhanced feature highlights
            div(class = "feature-icons",
                div(class = "feature-item",
                    tags$i(class = "fas fa-chart-line fa-3x"),
                    p("Advanced Data Visualization"),
                    tags$small("Interactive charts and graphs")
                ),
                div(class = "feature-item",
                    tags$i(class = "fas fa-filter fa-3x"),
                    p("Flexible Data Exploration"),
                    tags$small("Filter by year, country, and variables")
                ),
                div(class = "feature-item",
                    tags$i(class = "fas fa-brain fa-3x"),
                    p("Predictive Modeling"),
                    tags$small("Machine learning predictions")
                ),
                div(class = "feature-item",
                    tags$i(class = "fas fa-chart-pie fa-3x"),
                    p("Comprehensive Analytics"),
                    tags$small("Summary statistics and insights")
                )
            ),
            
            actionButton("start_app", "Explore Data", 
                         class = "btn btn-primary btn-lg get-started-btn mt-4", 
                         icon = icon("rocket"))
        )
    )
  )
}

# Main App UI
main_app_ui <- function() {
  fluidPage(
    theme = custom_theme,
    
    # Enhanced Custom CSS for styling
    tags$head(
      tags$style(HTML("
        /* Navigation Styling */
        .nav-pills .nav-link {
          color: #2c3e50;
          font-weight: 600;
          transition: all 0.3s ease;
          margin: 0 10px;
          border-radius: 20px;
          padding: 10px 15px;
        }
        
        .nav-pills .nav-link:hover {
          background-color: #3498db;
          color: white;
          transform: scale(1.05);
          box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .nav-pills .nav-link.active {
          background-color: #3498db !important;
          color: white !important;
          box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        /* Card Styling */
        .card {
          margin-bottom: 20px;
          box-shadow: 0 6px 12px rgba(0,0,0,0.1);
          border-radius: 10px;
          transition: all 0.3s ease;
        }
        
        .card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
        /* Page Header Styling */
        .page-header {
          background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
          color: white;
          padding: 25px;
          margin-bottom: 20px;
          border-radius: 10px;
          box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        
        .page-header h1 {
          color: white;
          font-weight: bold;
          text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        }
        
        .page-header p {
          color: rgba(255,255,255,0.8);
        }
        
        /* Logout Button */
        .logout-btn {
          background-color: #e74c3c;
          color: white;
          border: none;
          border-radius: 50px;
          padding: 10px 15px;
          transition: all 0.3s ease;
        }
        
        .logout-btn:hover {
          background-color: #c0392b;
          transform: scale(1.05);
          box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        /* Responsive Adjustments */
        @media (max-width: 768px) {
          .nav-pills .nav-link {
            margin: 5px 0;
            padding: 8px 12px;
          }
        }
      "))
    ),
    # Navigation
    navset_card_pill(
      # Home Tab
      nav_panel("Home", 
                fluidRow(
                  box(
                    width = 12,
                    status = "info",
                    solidHeader = TRUE,
                    
                    h2("Welcome to ECA Data Explorer", align = "center"),
                    h3("Key Features of this Website:"),
                    tags$ul(
                      tags$li("Real-time data filtering and visualization capabilities"),
                      tags$li("Advanced statistical analysis and trend identification"),
                      tags$li("Predictive modeling using machine learning algorithms"),
                      tags$li("Comparative analysis across different countries and time periods"),
                      tags$li("Interactive charts and customizable visualizations")
                    ),
                    h4("Use the navigation menu to explore different aspects of the energy consumption data.")
                  )
                ),
                fluidRow(
                  valueBoxOutput("total_countries", width = 3),
                  valueBoxOutput("year_range", width = 3),
                  valueBoxOutput("avg_consumption", width = 3),
                  valueBoxOutput("total_records", width = 3)
                ),
                fluidRow(
                  box(
                    width = 12,
                    status = "primary",
                    solidHeader = TRUE,
                    title = "3D Energy Consumption Visualization",
                    fluidRow(
                      column(4,
                             selectInput("x_var", "X Variable:", choices = NULL),
                             selectInput("y_var", "Y Variable:", choices = NULL),
                             selectInput("z_var", "Z Variable:", choices = NULL),
                             sliderInput("point_size", "Point Size:", 
                                         min = 1, max = 10, value = 3),
                             sliderInput("opacity", "Point Opacity:", 
                                         min = 0.1, max = 1, value = 0.7, step = 0.1)
                      ),
                      column(8,
                             plotlyOutput("scatter_3d", height = "600px")
                      )
                    )
                  )
                )
      ),
      
      # Upload Data Tab
      nav_panel("Upload Data", 
                fluidRow(
                  box(
                    title = "Upload Data File",
                    status = "primary",
                    solidHeader = TRUE,
                    width = 12,
                    fileInput("file", "Choose Excel/CSV File",
                              multiple = FALSE,
                              accept = c(".xlsx", ".xls", ".csv")),
                    radioButtons("file_type", "File Type",
                                 choices = c("Excel" = "excel", "CSV" = "csv"),
                                 selected = "excel"),
                    conditionalPanel(
                      condition = "input.file_type == 'csv'",
                      checkboxInput("header", "Header", TRUE),
                      radioButtons("sep", "Separator",
                                   choices = c(Comma = ",", 
                                               Semicolon = ";", 
                                               Tab = "\t"),
                                   selected = ",")
                    ),
                    actionButton("load_data", "Load Data", 
                                 class = "btn btn-primary"),
                    br(), br(),
                    textOutput("upload_status"),
                    DTOutput("preview_data")
                  )
                )
      ),
      
      
      # Data Visualizations Tab
      nav_panel("Data Visualizations",
                fluidRow(
                  box(title = "Visualization Controls", width = 4, status = "primary", solidHeader = TRUE,
                      selectInput("var_x", "X-axis Variable:", choices = NULL),
                      selectInput("var_y", "Y-axis Variable:", choices = NULL),
                      selectInput("chart_type", "Chart Type:",
                                  choices = c("Scatter Plot", "Bar Chart", "Line Chart", "Box Plot", "Heat Map"),
                                  selected = "Scatter Plot"),
                      conditionalPanel(
                        condition = "input.chart_type == 'Scatter Plot'",
                        checkboxInput("show_trend", "Show Trend Line", TRUE),
                        selectInput("trend_method", "Trend Line Type:",
                                    choices = c("Linear" = "lm", "Loess" = "loess"),
                                    selected = "lm")
                      ),
                      selectInput("color_scheme", "Color Scheme:",
                                  choices = c("Default", "Viridis", "Magma", "Plasma"),
                                  selected = "Default"),
                      checkboxInput("log_scale", "Use Log Scale for Y-axis", FALSE),
                      downloadButton("download_plot", "Download Plot", 
                                     class = "btn btn-info btn-block")
                  ),
                  box(title = "Visualization", width = 8, status = "info", solidHeader = TRUE,
                      plotlyOutput("dynamic_plot", height = "600px")
                  )
                )
      )
    )
  )
}

# Define UI function that switches between landing page and main app
ui <- function(request) {
  fluidPage(
    uiOutput("page_content")
  )
}

# Server Logic
server <- function(input, output, session) {
  # Initialize user database on first run
  init_user_db()
  
  # Track app state
  app_state <- reactiveVal("landing")
  rv <- reactiveValues(data = NULL)
  
  # Switch between landing page and main app
  observeEvent(input$start_app, {
    app_state("main")
  })
  
  # Render the appropriate page based on state
  output$page_content <- renderUI({
    if (app_state() == "landing") {
      landing_page()
    } else {
      main_app_ui()
    }
  })
  
  # File upload and data loading
  observeEvent(input$load_data, {
    req(input$file)
    
    withProgress(message = 'Loading data...', value = 0, {
      tryCatch({
        if (input$file_type == "excel") {
          rv$data <- read_excel(input$file$datapath)
        } else {
          rv$data <- read.csv(input$file$datapath,
                              header = input$header,
                              sep = input$sep)
        }
        
        output$upload_status <- renderText({
          paste("Data loaded successfully with", nrow(rv$data), "rows and", ncol(rv$data), "columns.")
        })
        
        output$preview_data <- renderDT({
          datatable(head(rv$data, 100), options = list(scrollX = TRUE))
        })
        
        # Update input choices based on column names
        updateSelectInput(session, "x_var",
                          choices = names(rv$data),
                          selected = names(rv$data)[1])
        
        updateSelectInput(session, "y_var",
                          choices = names(rv$data),
                          selected = names(rv$data)[2])
        
        updateSelectInput(session, "z_var",
                          choices = names(rv$data),
                          selected = names(rv$data)[3])
        
        updateSelectInput(session, "var_x",
                          choices = names(rv$data),
                          selected = names(rv$data)[1])
        
        updateSelectInput(session, "var_y",
                          choices = names(rv$data),
                          selected = names(rv$data)[2])
        
      }, error = function(e) {
        output$upload_status <- renderText({
          paste("Error loading file:", e$message)
        })
        showNotification(
          paste("Error loading file:", e$message),
          type = "error"
        )
      })
    })
  })
  
  # Create filtered data reactive expression
  filtered_data <- reactive({
    req(rv$data)
    return(rv$data)
  })
  
  # ValueBox outputs
  output$total_countries <- renderValueBox({
    req(rv$data)
    if ("country" %in% names(rv$data)) {
      countries_count <- length(unique(rv$data$country))
      valueBox(
        countries_count,
        "Countries",
        icon = icon("globe"),
        color = "blue"
      )
    } else {
      valueBox(
        "N/A",
        "Countries",
        icon = icon("globe"),
        color = "blue"
      )
    }
  })
  
  output$year_range <- renderValueBox({
    req(rv$data)
    if ("year" %in% names(rv$data)) {
      year_min <- min(rv$data$year, na.rm = TRUE)
      year_max <- max(rv$data$year, na.rm = TRUE)
      valueBox(
        paste(year_min, "-", year_max),
        "Year Range",
        icon = icon("calendar"),
        color = "green"
      )
    } else {
      valueBox(
        "N/A",
        "Year Range",
        icon = icon("calendar"),
        color = "green"
      )
    }
  })
  
  output$avg_consumption <- renderValueBox({
    req(rv$data)
    if ("biofuel_consumption" %in% names(rv$data)) {
      avg_consumption <- mean(rv$data$biofuel_consumption, na.rm = TRUE)
      valueBox(
        round(avg_consumption, 2),
        "Avg. Consumption",
        icon = icon("tachometer-alt"),
        color = "yellow"
      )
    } else {
      valueBox(
        "N/A",
        "Avg. Consumption",
        icon = icon("tachometer-alt"),
        color = "yellow"
      )
    }
  })
  
  output$total_records <- renderValueBox({
    req(rv$data)
    valueBox(
      nrow(rv$data),
      "Total Records",
      icon = icon("database"),
      color = "red"
    )
  })
  
  # Render 3D scatter plot
  output$scatter_3d <- renderPlotly({
    req(rv$data, input$x_var, input$y_var, input$z_var)
    
    # Ensure the selected variables exist in the data
    if (!(input$x_var %in% names(rv$data)) || 
        !(input$y_var %in% names(rv$data)) || 
        !(input$z_var %in% names(rv$data))) {
      return(NULL)
    }
    
    # Check if there's a country column for color
    color_var <- if ("country" %in% names(rv$data)) "country" else NULL
    
    plot_ly(data = rv$data,
            x = as.formula(paste0("~", input$x_var)),
            y = as.formula(paste0("~", input$y_var)),
            z = as.formula(paste0("~", input$z_var)),
            type = "scatter3d",
            mode = "markers",
            marker = list(
              size = input$point_size,
              opacity = input$opacity,
              color = if (!is.null(color_var)) ~get(color_var) else NULL,
              colorscale = 'Viridis'
            ),
            hoverinfo = "text",
            text = ~paste(
              if (!is.null(color_var)) paste("Country:", get(color_var)) else "",
              paste(input$x_var, ":", get(input$x_var)),
              paste(input$y_var, ":", get(input$y_var)),
              paste(input$z_var, ":", get(input$z_var)),
              sep = "<br>"
            )
    ) %>%
      layout(
        scene = list(
          xaxis = list(title = input$x_var),
          yaxis = list(title = input$y_var),
          zaxis = list(title = input$z_var)
        ),
        title = "3D Energy Consumption Analysis",
        showlegend = TRUE
      )
  })
  
  # Dynamic visualization
  output$dynamic_plot <- renderPlotly({
    req(rv$data, input$var_x, input$var_y)
    
    # Ensure the selected variables exist in the data
    if (!(input$var_x %in% names(rv$data)) || 
        !(input$var_y %in% names(rv$data))) {
      return(NULL)
    }
    
    plot_data <- filtered_data()
    
    # Check if there's a country column for color
    color_var <- if ("country" %in% names(plot_data)) "country" else NULL
    
    p <- ggplot(plot_data, aes_string(x = input$var_x, y = input$var_y, 
                                      color = color_var)) +
      theme_minimal() +
      labs(x = input$var_x, y = input$var_y)
    
    # Apply color scheme
    if (!is.null(color_var) && input$color_scheme != "Default") {
      p <- p + scale_color_viridis_d(option = tolower(input$color_scheme))
    }
    
    # Apply log scale if selected
    if (input$log_scale) {
      p <- p + scale_y_log10()
    }
    
    # Apply chart type
    switch(input$chart_type,
           "Scatter Plot" = {
             p <- p + geom_point(alpha = 0.7)
             if (input$show_trend) {
               p <- p + geom_smooth(method = input$trend_method, se = FALSE)
             }
           },
           "Bar Chart" = {
             # For bar charts, we need to ensure the x variable is categorical
             p <- ggplot(plot_data, aes_string(x = input$var_x, y = input$var_y, 
                                               fill = color_var)) +
               geom_bar(stat = "identity", position = "dodge") +
               theme_minimal()
           },
           "Line Chart" = {
             p <- p + geom_line() + geom_point()
           },
           "Box Plot" = {
             p <- ggplot(plot_data, aes_string(x = input$var_x, y = input$var_y)) +
               geom_boxplot() +
               theme_minimal()
           },
           "Heat Map" = {
             # For heat maps, we adapt based on available data
             if (!is.null(color_var)) {
               p <- ggplot(plot_data, aes_string(x = input$var_x, y = color_var, fill = input$var_y)) +
                 geom_tile() +
                 scale_fill_viridis_c() +
                 theme_minimal()
             } else {
               # If no country column, create a basic heatmap
               p <- ggplot(plot_data, aes_string(x = input$var_x, y = input$var_y)) +
                 stat_density_2d(aes(fill = after_stat(density)), geom = "raster", contour = FALSE) +
                 scale_fill_viridis_c() +
                 theme_minimal()
             }
           }
    )
    
    ggplotly(p) %>%
      layout(
        margin = list(l = 50, r = 50, b = 50, t = 50),
        showlegend = TRUE
      )
  })
  
  # Download handler for plots
  output$download_plot <- downloadHandler(
    filename = function() {
      paste("plot-", Sys.Date(), ".png", sep="")
    },
    content = function(file) {
      ggsave(file, plot = last_plot(), device = "png", width = 10, height = 7, dpi = 300)
    }
  )
}

# Run the app
shinyApp(ui = ui, server = server)
